Describe what HTTP is and the role of the request and the response.

HTTP is the most common protocol for communicating on the web, it defines an agreed upon format for sending messages back and forth.

Each HTTP transaction involves a request and a response, each transaction is also stateless and therefore has no knowledge of prior requets. The request is sent by a client (generally a browser) and it communicates the action that it would like performed and the resource it should be perfomed on. The HTTP request is received by a server and processed according to the application logic. Once processing is complete, the server will send a HTTP response back to the client. The response includes a status indicating the results of the request, as well as the requested resource (if applicable).

What are the components of an HTTP request and an HTTP response?

An HTTP request is made up of the HTTP method, the path, the HTTP version and the host (via a header key and value pair). The HTTP method describes the action being requested, the path describes the location of the resource being requested, and the host identifies the domain where the resource is located (for purposes of DNS lookup of the server's IP and to differentiate between hosts located on the same server). The request may also include headers describing the client and the types/formats of responses it expects, as well as a body containing additional information pertinent to the request.

An HTTP response is made up of a HTTP version and a status code that indicates the result of the request. The response may also include headers describing the resource being sent in the response (Content-Type, etc.), the type of server it was sent from, and a body containing the requested resource (if applicable). The response headers can also be used to set cookies on the client application that will be used in ongoing requests (in order to simulate state in a series of HTTP request/response cycles).

Identify the components of a URL. Construct a URL that contains a few params and values.

Protocol: http
Host: google.com
Port: :80 (default is used where ommitted)
Path: /
Query parameters: ?name=mike&test=aced (hopefully)

Explain the difference between GET and POST, and know when to choose each.

GET and POST are the two most common HTTP request methods. GET is generally used when requesting a resource be returned without any changes or actions being performed on that resource. GET requests store their query parameters in the URL itself, this is handy for resources that people will want to share with others as it provides a stable link (such as search results). GET requests should be used for actions that can be completed repeatedly without repercussions for the underlying data or state of the application.

POST requests are used when initiating some action that will make changes to the resource or the data underlying the appication (including updating, deleting, or creating a new resource). A POST request stores the relevant query parameters in the request body rather than the URL. POST actions should not be made repeatedly without notifying the client of the dangers of proceeding.

Sensitive data should be sent via a POST request as it ensures this data is not included in the URL, however the message body does not ensure it's safety from malicious actors. The HTTP body is also easily acccessible via packet sniffing and therefore HTTPS must be used to ensure the safety of sensitive data (via encryption).

What is the difference between client-side and server-side code? For each file in a Sinatra project, be able to say which it is.

Client-side and server-side code identifies where the code will actually be processed. For instance, HTML files, CSS and Javascript code is (usually) processed by the client (browser) before being displayed to the user, therefore these are considered client-side code.

Server-side code is processed by the server itself, this includes the application logic and the storing/management of data associated with the application. There are other trickier files however, server side templates (like ERB) are server side code, as the server must process them to prior to sending them to the client (as HTML).

How does an HTML form element interact with the server-side code that processes it.

A HTML form identifies both the HTTP method it will send in the HTTP request as well as the path where the request will be directed. On form submission the HTTP request will be sent with those criteria along with the fields and values of the form as key/values pairs. If the HTTP form method is GET, the key/value pairs will be sent in the URL itself as query parameters, but if the method is POST the key/value pairs will be sent in the HTTP request body.

Upon receipt the server processes the request, including parsing the key/value pairs and storing them in a datatype appropriate for the application to utilize. The application then uses the HTTP method and path to determine the action to be performed, and the key/value pairs from the form to perform that action and send a response back to the client.

Why is user-entered content a security risk? Be aware of how to mitigate this risk.



